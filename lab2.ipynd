{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ecc1a969",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sklearn\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.naive_bayes import CategoricalNB\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn import preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72756a86",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "91700efd",
   "metadata": {},
   "source": [
    "1. Загружаем Mushrooms, делаем DataFrame\n",
    "\n",
    "Вычисляем распределение признаков по классам\n",
    "\n",
    "Визуализируем распределение"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69d4745c",
   "metadata": {},
   "outputs": [],
   "source": [
    "mashrooms = pd.read_csv('mushrooms.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ead6c4b4",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "percentage_df = []\n",
    "properties = mashrooms.drop(columns=['class']).columns\n",
    "\n",
    "for one_prop in properties:\n",
    "    temp_df = mashrooms[['class', one_prop]]\n",
    "    result = temp_df.groupby('class').value_counts(normalize=True).reset_index()\n",
    "    result = result.rename(columns={one_prop: 'property_data', 0: 'propery_percentage'})\n",
    "    result['property_name'] = one_prop\n",
    "    percentage_df.append(result)\n",
    "\n",
    "percentage_df = pd.concat(percentage_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "83c8afb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>property_data</th>\n",
       "      <th>propery_percentage</th>\n",
       "      <th>property_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>0.809886</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>e</td>\n",
       "      <td>a</td>\n",
       "      <td>0.095057</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>e</td>\n",
       "      <td>l</td>\n",
       "      <td>0.095057</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>p</td>\n",
       "      <td>f</td>\n",
       "      <td>0.551583</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>p</td>\n",
       "      <td>s</td>\n",
       "      <td>0.147089</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>p</td>\n",
       "      <td>y</td>\n",
       "      <td>0.147089</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>p</td>\n",
       "      <td>p</td>\n",
       "      <td>0.065373</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>p</td>\n",
       "      <td>c</td>\n",
       "      <td>0.049030</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>0.030644</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>p</td>\n",
       "      <td>m</td>\n",
       "      <td>0.009193</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  class property_data  propery_percentage property_name\n",
       "0     e             n            0.809886          odor\n",
       "1     e             a            0.095057          odor\n",
       "2     e             l            0.095057          odor\n",
       "3     p             f            0.551583          odor\n",
       "4     p             s            0.147089          odor\n",
       "5     p             y            0.147089          odor\n",
       "6     p             p            0.065373          odor\n",
       "7     p             c            0.049030          odor\n",
       "8     p             n            0.030644          odor\n",
       "9     p             m            0.009193          odor"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percentage_df[percentage_df['property_name'] == properties[4]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c4eb043",
   "metadata": {},
   "source": [
    "0'cap-shape', 1'cap-surface', 2'cap-color', 3'bruises', 4'odor',\n",
    "5'gill-attachment', 6'gill-spacing', 7'gill-size', 8'gill-color',\n",
    "9'stalk-shape', 10'stalk-root', 11'stalk-surface-above-ring',\n",
    "12'stalk-surface-below-ring', 13'stalk-color-above-ring',\n",
    "14'stalk-color-below-ring', 15'veil-type', 16'veil-color', 17'ring-number',\n",
    "18'ring-type', 19'spore-print-color', 20'population', 21'habitat'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "21030a48",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f763aa9c790>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 558.875x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "to_visual = properties[0]\n",
    "sns.catplot(x = to_visual, data=mashrooms, hue='class',kind = 'count' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f7733f9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "51b447d2",
   "metadata": {},
   "source": [
    "2. Построить решающую функцию по каждой переменной на основе частот\n",
    "\n",
    "вычислить точность каждого решения\n",
    "\n",
    "найти наиболее информативную переменную"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d0da8929",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = mashrooms.drop(columns=['class'])\n",
    "y = mashrooms['class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f8a6b895",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>e</td>\n",
       "      <td>0.517971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>p</td>\n",
       "      <td>0.482029</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  index     class\n",
       "0     e  0.517971\n",
       "1     p  0.482029"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts(normalize=True).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ad221b80",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_prob_col(column,j, alpha = 0):\n",
    "    global X\n",
    "    global y\n",
    "    prob = {}\n",
    "    x = X[column]\n",
    "    x = x[y == j]\n",
    "    k = len(X[column].unique())\n",
    "    for i in X[column].unique():\n",
    "        prob[i] = (x[x == i].count() + alpha) / (x.count() + alpha * k)\n",
    "    return prob\n",
    "    \n",
    "def predict(X,column):\n",
    "    global y\n",
    "    y_pred = []\n",
    "    prob0 = get_prob_col(column,'e')\n",
    "    prob1 = get_prob_col(column,'p')\n",
    "    p0 = y[y == 'e'].count() / y.count()\n",
    "    p1 = y[y == 'p'].count() / y.count()\n",
    "    for k in X[column]:\n",
    "        if p0 * prob0[k] < p1 * prob1[k]:\n",
    "            y_pred.append('p')\n",
    "        else:\n",
    "            y_pred.append('e')\n",
    "    return np.array(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6e7a1106",
   "metadata": {},
   "outputs": [],
   "source": [
    "results = {\n",
    "    'column_name': list(),\n",
    "    'score_train': list()\n",
    "}\n",
    "for col in X.columns:\n",
    "    results['column_name'].append(col)\n",
    "    results['score_train'].append(accuracy_score(y, predict(X,col)))\n",
    "results_df = pd.DataFrame(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "df636897",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>score_train</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>odor</td>\n",
       "      <td>0.985229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>spore-print-color</td>\n",
       "      <td>0.868045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>gill-color</td>\n",
       "      <td>0.805022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>ring-type</td>\n",
       "      <td>0.775480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>stalk-surface-above-ring</td>\n",
       "      <td>0.774495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>stalk-surface-below-ring</td>\n",
       "      <td>0.766125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>gill-size</td>\n",
       "      <td>0.756278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bruises</td>\n",
       "      <td>0.743968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>population</td>\n",
       "      <td>0.721812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>stalk-color-above-ring</td>\n",
       "      <td>0.716396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>stalk-color-below-ring</td>\n",
       "      <td>0.714426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>habitat</td>\n",
       "      <td>0.690300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>stalk-root</td>\n",
       "      <td>0.645987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>gill-spacing</td>\n",
       "      <td>0.615953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cap-color</td>\n",
       "      <td>0.595273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cap-surface</td>\n",
       "      <td>0.580502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>cap-shape</td>\n",
       "      <td>0.564254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>stalk-shape</td>\n",
       "      <td>0.552930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>ring-number</td>\n",
       "      <td>0.538159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>veil-color</td>\n",
       "      <td>0.518956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>veil-type</td>\n",
       "      <td>0.517971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>gill-attachment</td>\n",
       "      <td>0.517971</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 column_name  score_train\n",
       "4                       odor     0.985229\n",
       "19         spore-print-color     0.868045\n",
       "8                 gill-color     0.805022\n",
       "18                 ring-type     0.775480\n",
       "11  stalk-surface-above-ring     0.774495\n",
       "12  stalk-surface-below-ring     0.766125\n",
       "7                  gill-size     0.756278\n",
       "3                    bruises     0.743968\n",
       "20                population     0.721812\n",
       "13    stalk-color-above-ring     0.716396\n",
       "14    stalk-color-below-ring     0.714426\n",
       "21                   habitat     0.690300\n",
       "10                stalk-root     0.645987\n",
       "6               gill-spacing     0.615953\n",
       "2                  cap-color     0.595273\n",
       "1                cap-surface     0.580502\n",
       "0                  cap-shape     0.564254\n",
       "9                stalk-shape     0.552930\n",
       "17               ring-number     0.538159\n",
       "16                veil-color     0.518956\n",
       "15                 veil-type     0.517971\n",
       "5            gill-attachment     0.517971"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df.sort_values('score_train', ascending=False)\n",
    "# gill-color"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddcc8907",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "12d22bd4",
   "metadata": {},
   "source": [
    "3. Наивный байесовский классификатор из sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f4cc0f24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9405465288035451\n"
     ]
    }
   ],
   "source": [
    "X_c = X.copy()\n",
    "y_c = y.copy()\n",
    "for i in X_c:\n",
    "    X_c[i]=LabelEncoder().fit_transform(X_c[i])\n",
    "y_c = LabelEncoder().fit_transform(y_c)\n",
    "model = sklearn.naive_bayes.CategoricalNB(alpha=5).fit(X_c,y_c)\n",
    "print(accuracy_score(y_c, model.predict(X_c)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a40e454c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "810cf06f",
   "metadata": {},
   "source": [
    "4. написать самому"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a777b4ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.940300344657804"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_prob_col(column,j, alpha = 0):\n",
    "    global X\n",
    "    global y\n",
    "    prob = {}\n",
    "    x = X[column]\n",
    "    x = x[y == j]\n",
    "    k = len(X[column].unique())\n",
    "    for i in X[column].unique():\n",
    "        prob[i] = (x[x == i].count() + alpha) / (x.count() + alpha * k)\n",
    "    return prob\n",
    "\n",
    "def get_prob(j,alpha = 0):\n",
    "    prob = {}\n",
    "    for col in X.columns:\n",
    "        prob[col] = (get_prob_col(col,j,alpha))\n",
    "    return prob\n",
    "\n",
    "def predict(X, alpha = 0):\n",
    "    prob0 = get_prob('e',alpha= alpha)\n",
    "    prob1 = get_prob('p',alpha = alpha)\n",
    "    p0 = y[y == 'e'].count() / y.count()\n",
    "    p1 = y[y == 'p'].count() / y.count()\n",
    "    y_pred = []\n",
    "    for i in range(len(X)):\n",
    "        prod0 = p0\n",
    "        prod1 = p1\n",
    "        for col in X.columns:\n",
    "            prod0 *= prob0[col][X[i:i+1][col].values[0]]\n",
    "            prod1 *= prob1[col][X[i:i+1][col].values[0]]\n",
    "        if p0 * prod0 < p1 * prod1:\n",
    "            y_pred.append('p')\n",
    "        else:\n",
    "            y_pred.append('e')\n",
    "    return y_pred\n",
    "accuracy_score(predict(X, alpha=5), y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4941a633",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cb3424de",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "80dc850a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.84431273 0.19998395 0.06701388 ... 0.06816805 0.92580453 0.01165206]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/develop_user/.local/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:460: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "X_c = X.copy()\n",
    "y_c = y.copy()\n",
    "for i in X_c:\n",
    "    X_c[i]=LabelEncoder().fit_transform(X_c[i])\n",
    "y_c = LabelEncoder().fit_transform(y_c)\n",
    "model.fit(X_c,y_c)\n",
    "probs = model.predict_proba(X_c)[:,1]\n",
    "print(probs) # просто логистическая регрессия\n",
    "plt.hist(probs, 50)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d506b250",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/develop_user/.local/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:460: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.99985027 0.0050545  0.06729362 ... 0.01304552 0.99999952 0.01791089]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "X_c = X.copy()\n",
    "for col in X_c.columns: # для каждой колонки считаем оценки вероятности\n",
    "    veroyatnost = X_c[col].value_counts(normalize=True)\n",
    "    X_c[col] = X_c[col].apply(lambda x: veroyatnost[x])\n",
    "    X_c[col] = np.log(X_c[col]/(1-X_c[col])) # и делаем обратное логистическое преобразования\n",
    "    X_c[col] = X_c[col].apply(lambda x: 0 if x == np.inf else x) # при оценке вероятности 1 получается бесконечность, зануляем\n",
    "y_c = y.copy()\n",
    "y_c = LabelEncoder().fit_transform(y_c)\n",
    "model.fit(X_c,y_c)\n",
    "probs = model.predict_proba(X_c)[:,1]\n",
    "print(probs) # с обратным логистическим преобразованием\n",
    "plt.hist(probs, 50)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
