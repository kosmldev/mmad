{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "ecc1a969",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sklearn\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.naive_bayes import CategoricalNB\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn import preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3a66b5c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "39da67a4",
   "metadata": {},
   "source": [
    "1. Загружаем Mushrooms, делаем DataFrame\n",
    "\n",
    "Вычисляем распределение признаков по классам\n",
    "\n",
    "Визуализируем распределение"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "69d4745c",
   "metadata": {},
   "outputs": [],
   "source": [
    "mashrooms = pd.read_csv('mushrooms.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "39b7d903",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "percentage_df = []\n",
    "properties = mashrooms.drop(columns=['class']).columns\n",
    "\n",
    "for one_prop in properties:\n",
    "    temp_df = mashrooms[['class', one_prop]]\n",
    "    result = temp_df.groupby('class').value_counts(normalize=True).reset_index()\n",
    "    result = result.rename(columns={one_prop: 'property_data', 0: 'propery_percentage'})\n",
    "    result['property_name'] = one_prop\n",
    "    percentage_df.append(result)\n",
    "\n",
    "percentage_df = pd.concat(percentage_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "cc24289a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>property_data</th>\n",
       "      <th>propery_percentage</th>\n",
       "      <th>property_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>e</td>\n",
       "      <td>n</td>\n",
       "      <td>0.809886</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>e</td>\n",
       "      <td>a</td>\n",
       "      <td>0.095057</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>e</td>\n",
       "      <td>l</td>\n",
       "      <td>0.095057</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>p</td>\n",
       "      <td>f</td>\n",
       "      <td>0.551583</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>p</td>\n",
       "      <td>s</td>\n",
       "      <td>0.147089</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>p</td>\n",
       "      <td>y</td>\n",
       "      <td>0.147089</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>p</td>\n",
       "      <td>p</td>\n",
       "      <td>0.065373</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>p</td>\n",
       "      <td>c</td>\n",
       "      <td>0.049030</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>0.030644</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>p</td>\n",
       "      <td>m</td>\n",
       "      <td>0.009193</td>\n",
       "      <td>odor</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  class property_data  propery_percentage property_name\n",
       "0     e             n            0.809886          odor\n",
       "1     e             a            0.095057          odor\n",
       "2     e             l            0.095057          odor\n",
       "3     p             f            0.551583          odor\n",
       "4     p             s            0.147089          odor\n",
       "5     p             y            0.147089          odor\n",
       "6     p             p            0.065373          odor\n",
       "7     p             c            0.049030          odor\n",
       "8     p             n            0.030644          odor\n",
       "9     p             m            0.009193          odor"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "percentage_df[percentage_df['property_name'] == properties[4]]\n",
    "# percentage_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "dd935e17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>e</td>\n",
       "      <td>0.517971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>p</td>\n",
       "      <td>0.482029</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  index     class\n",
       "0     e  0.517971\n",
       "1     p  0.482029"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts(normalize=True).reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52cb8f8d",
   "metadata": {},
   "source": [
    "0'cap-shape', 1'cap-surface', 2'cap-color', 3'bruises', 4'odor',\n",
    "5'gill-attachment', 6'gill-spacing', 7'gill-size', 8'gill-color',\n",
    "9'stalk-shape', 10'stalk-root', 11'stalk-surface-above-ring',\n",
    "12'stalk-surface-below-ring', 13'stalk-color-above-ring',\n",
    "14'stalk-color-below-ring', 15'veil-type', 16'veil-color', 17'ring-number',\n",
    "18'ring-type', 19'spore-print-color', 20'population', 21'habitat'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "21030a48",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f37108a31f0>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 558.875x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "to_visual = properties[0]\n",
    "sns.catplot(x = to_visual, data=mashrooms, hue='class',kind = 'count' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b884b75",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "fadb2207",
   "metadata": {},
   "source": [
    "2. Построить решающую функцию по каждой переменной на основе частот\n",
    "\n",
    "вычислить точность каждого решения\n",
    "\n",
    "найти наиболее информативную переменную"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "id": "df42c98e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# X = mashrooms.drop(columns=['class'])\n",
    "X = mashrooms[['gill-attachment', 'gill-spacing','gill-size', 'gill-color']]\n",
    "y = mashrooms['class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "ba048325",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "ad221b80",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_prob_col(column,j, alpha = 0):\n",
    "    global X\n",
    "    global y\n",
    "    prob = {}\n",
    "    x = X[column]\n",
    "    x = x[y == j]\n",
    "    k = len(X[column].unique())\n",
    "    for i in X[column].unique():\n",
    "        prob[i] = (x[x == i].count() + alpha) / (x.count() + alpha * k)\n",
    "    return prob\n",
    "    \n",
    "def predict(X,column):\n",
    "    global y\n",
    "    y_pred = []\n",
    "    prob0 = get_prob_col(column,'e')\n",
    "    prob1 = get_prob_col(column,'p')\n",
    "    p0 = y[y == 'e'].count() / y.count()\n",
    "    p1 = y[y == 'p'].count() / y.count()\n",
    "    for k in X[column]:\n",
    "        if p0 * prob0[k] < p1 * prob1[k]:\n",
    "            y_pred.append('p')\n",
    "        else:\n",
    "            y_pred.append('e')\n",
    "    return np.array(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "6e7a1106",
   "metadata": {},
   "outputs": [],
   "source": [
    "results = {\n",
    "    'column_name': list(),\n",
    "    'score_test': list(),\n",
    "    'score_train': list()\n",
    "}\n",
    "for col in X.columns:\n",
    "    results['column_name'].append(col)\n",
    "    results['score_test'].append(accuracy_score(y_test, predict(X_test,col)))\n",
    "    results['score_train'].append(accuracy_score(y_train, predict(X_train,col)))\n",
    "results_df = pd.DataFrame(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "df636897",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_name</th>\n",
       "      <th>score_test</th>\n",
       "      <th>score_train</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>gill-color</td>\n",
       "      <td>0.801194</td>\n",
       "      <td>0.806908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>gill-size</td>\n",
       "      <td>0.750093</td>\n",
       "      <td>0.759324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>gill-spacing</td>\n",
       "      <td>0.624394</td>\n",
       "      <td>0.611795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>gill-attachment</td>\n",
       "      <td>0.513987</td>\n",
       "      <td>0.519934</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       column_name  score_test  score_train\n",
       "3       gill-color    0.801194     0.806908\n",
       "2        gill-size    0.750093     0.759324\n",
       "1     gill-spacing    0.624394     0.611795\n",
       "0  gill-attachment    0.513987     0.519934"
      ]
     },
     "execution_count": 279,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df.sort_values('score_test', ascending=False)\n",
    "# gill-color"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9aaefcc6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e7f770ec",
   "metadata": {},
   "source": [
    "3. Наивный байесовский классификатор из sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "bb7adac2",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_c = X.copy()\n",
    "y_c = y.copy()\n",
    "for i in X_c:\n",
    "    X_c[i]=LabelEncoder().fit_transform(X_c[i])\n",
    "y_c = LabelEncoder().fit_transform(y_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "7c40f952",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_c, y_c, test_size=0.25, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "id": "0f2a8654",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test 0.8769079271294928\n",
      "train 0.8696865255210898\n"
     ]
    }
   ],
   "source": [
    "model = sklearn.naive_bayes.CategoricalNB().fit(X_train,y_train)\n",
    "print('test',accuracy_score(y_test, model.predict(X_test)))\n",
    "print('train',accuracy_score(y_train, model.predict(X_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e610c7ec",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c41eb97c",
   "metadata": {},
   "source": [
    "4. написать самому"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "id": "e6d417a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_prob(j,alpha = 0):\n",
    "    prob = {}\n",
    "    for col in X.columns:\n",
    "        prob[col] = (get_prob_col(col,j,alpha))\n",
    "    return prob\n",
    "def predict(X, alpha = 0):\n",
    "    prob0 = get_prob('e',alpha= alpha)\n",
    "    prob1 = get_prob('p',alpha = alpha)\n",
    "    p0 = y[y == 'e'].count() / y.count()\n",
    "    p1 = y[y == 'p'].count() / y.count()\n",
    "    y_pred = []\n",
    "    for i in range(len(X)):\n",
    "        prod0 = p0\n",
    "        prod1 = p1\n",
    "        for col in X.columns:\n",
    "            prod0 *= prob0[col][X[i:i+1][col].values[0]]\n",
    "            prod1 *= prob1[col][X[i:i+1][col].values[0]]\n",
    "        if p0 * prod0 < p1 * prod1:\n",
    "            y_pred.append('p')\n",
    "        else:\n",
    "            y_pred.append('e')\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "id": "03c98262",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test: 0.8769079271294928\n",
      "train: 0.8696865255210898\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n",
    "print('test:',accuracy_score(predict(X_test, alpha= 0), y_test))\n",
    "print('train:',accuracy_score(predict(X_train, alpha= 0), y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29e0fd81",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf3be209",
   "metadata": {},
   "outputs": [],
   "source": [
    "# с этого момента начинется хз че, тут чатжпт написал нихуя не понял че каво"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "06f0e311",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "id": "947722db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "X_c = X.copy()\n",
    "y_c = y.copy()\n",
    "for i in X_c:\n",
    "    X_c[i]=LabelEncoder().fit_transform(X_c[i])\n",
    "y_c = LabelEncoder().fit_transform(y_c)\n",
    "model.fit(X_c,y_c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "ab293d6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.94048847, 0.50781619, 0.43574979, ..., 0.1489659 , 0.98052615,\n",
       "       0.02986013])"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "probs = model.predict_proba(X_c)[:,1]\n",
    "probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "id": "7606f442",
   "metadata": {},
   "outputs": [],
   "source": [
    "log_odds = np.log(probs / (1 - probs))\n",
    "inverse_logit = 1 / (1 + np.exp(-log_odds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "28b2d5ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.94048847, 0.50781619, 0.43574979, ..., 0.1489659 , 0.98052615,\n",
       "       0.02986013])"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inverse_logit"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
