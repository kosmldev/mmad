import json
from transformers import pipeline

json_vacancy = open('remote_jobs_relocate_messages.json', 'r').read()
json_vacancy = json.loads(json_vacancy)

messages = json_vacancy['messages']


classifier = pipeline("zero-shot-classification",
                      model="local")

job_offer_labels = ['job offer', 'advertisment']

salary_class_labels = ['job offer with salary indication', 'job offer without salary indication']

first_class_labels = ['job offer in marketing', 'job offer in development',
                      'job offer in design', 'job offer in management',
                      'job offer in recruting']

dict_out = {
    'message_id': [],
    'message': [],
    'date': [],
    'is_forwarded': [],
    'is_job_offer': [],
    'job_offer_prediction': [],
    'is_salary_indicated': [],
    'salary_indication_prediction': []
}

dict_first_class = {
    'message_id': [],
    'first_class': [],
    'first_class_prediction': []
}

counter = 0
for one_message in messages:
    if not one_message['post']:
        continue
    
    if one_message['message'] == '':
        continue
    else:
        message_ = one_message['message']
    
    message_id_ = one_message['id']
    
    is_forwarded_ = True
    if one_message['fwd_from'] is None:
        is_forwarded_ = False
    
    date_ = one_message['date']
    
    answer = classifier(message_, job_offer_labels)
    job_offer_result_ = answer['scores'][answer['labels'].index('job offer')]
    
    
    if job_offer_result_ > 0.7:
        is_job_offer_ = True
    else:
        is_job_offer_ = False
    
    dict_out['message_id'].append(message_id_)
    dict_out['message'].append(message_)
    dict_out['date'].append(date_)
    dict_out['is_forwarded'].append(is_forwarded_)
    dict_out['is_job_offer'].append(is_job_offer_)
    dict_out['job_offer_prediction'].append(job_offer_result_)
    
    if is_job_offer_:
        answer = classifier(message_, salary_class_labels)
        salary_indication_result_ = answer['scores'][answer['labels'].index('job offer with salary indication')]
        
        if salary_indication_result_ > 0.7:
            is_salary_indicated_ = True
        else:
            is_salary_indicated_ = False
        dict_out['is_salary_indicated'].append(is_salary_indicated_)
        dict_out['salary_indication_prediction'].append(salary_indication_result_)
        
        answer = classifier(message_, first_class_labels, multi_label=True)
        for one_label in answer['labels']:
            result_ = answer['scores'][answer['labels'].index(one_label)]
            if result_ > 0.7:
                dict_first_class['message_id'].append(message_id_)
                dict_first_class['first_class'].append(one_label)
                dict_first_class['first_class_prediction'].append(result_)
        
    
    counter += 1
    print(counter)
    if counter > 50:
        break
